Q.1 //You are climbing a staircase. It takes n steps to reach the top.
//Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
package geekswork;

 class solution  {
	public int fact(int n)                             //this function will return factorial of a number to the calling function
	{int factorial=1;
		for (int i=1;i<=n;i++)
		{
			factorial=factorial*i;
		}
		return factorial;
	}
	}
class geekwork10 {
    public static void main(String args[]) {
        int c=0,total=0; int n=5;
       solution ob=new solution();
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=n;j++)
            {
                total=(1*i)+(2*j);                //Condition to check the no of ways we can climb to given no of step using step size of 1&2 without permutation
                if (total==n)
                {
                    
                    c=c+((ob.fact(i+j))/(ob.fact(i)*ob.fact(j)));             //this is used to calculate total ways to clim up with permulation
                    continue;
                }
                     
            }
        }
        System.out.println(c);
    }
}


Q.2//Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

//The number of elements initialized in nums1 and nums2 are m and n respectively. 
//You may assume that nums1 has a size equal to m + n such that it has enough space to hold additional elements from nums2.

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int temp=0;
        for(int i=0;i<m+n;i++)                    //this loop is used for merging both the array
        {
            if(i>=m)
            {
                nums1[i]=nums2[i-m];
            }
            else
                nums1[i]=nums1[i];
        }
        for(int j=0;j<m+n;j++)                   //these two loops are used for sorting
        {
            for(int k=0;k<m+n-1;k++)
            {
                if(nums1[k]>nums1[k+1])           //Swapping the two number
                {
                    temp=nums1[k];
                nums1[k]=nums1[k+1];
                nums1[k+1]=temp;
                }
            }
        }
        
    }
}


Q.3    Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, 
which minimizes thesum of all numbers along its path.Note: You can only move either down or 
right at any point in time.

class Solution {
    public int minPathSum(int[][] grid) {                          //We have followed bottom to up approach of dyanimic programming
        
        int rows = grid.length;                                        //Calculate size of grid
        int cols = grid[0].length;
        int dp[][] = new int[rows][cols];
        
        for(int i = rows-1;i>=0;i--)        
        {
            for(int j = cols-1;j>=0;j--)
            {
                if(i==rows-1 && j == cols-1)                            //element is last element of grid
                {
                    dp[i][j] = grid[i][j];
                }
				else if(i==rows-1)                         // element belongs to last row
                {
                    dp[i][j] = dp[i][j+1] + grid[i][j];
                } 
				else if(j == cols-1)                         //elements belongs to last columns
                {
                    dp[i][j] = dp[i+1][j] + grid[i][j];
                } 
                else                                                                    //it will choose the min value
                {
                    dp[i][j] =  grid[i][j]  + Math.min(dp[i][j+1], dp[i+1][j]);
                }
            }
        }
        
        return dp[0][0];                                                     //It will contain minsum of path that can be followed
        
    }
}



Q.4  Given an m x n board and a word, find if the word exists in the grid.The word can be constructed from letters of sequentially 
adjacent cells, where "adjacent" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

class Solution {
    public boolean exist(char[][] board, String word) // Main method
{
        for(int i = 0; i < board.length; i++)  // Iterate through the matrix, while doing so, call the support method so it will do the calculations.
        {
            for(int j = 0; j < board[0].length; j++) 
            {                
                if(helper(board, i, j, word, 0))// Here the main method gets the results form the support method.
                {
                   return true;
                }
            }
        }
        return false;
    }
    
    private boolean helper(char[][] board, int x, int y, String word, int end) // Support method.
    {     
        if(x < 0 || board.length-1 < x || y < 0 || board[0].length-1 < y || board[x][y] == 'x' || word.charAt(end) != board[x][y]) 
	// Check if we are in the boundaries, or the spot has been visited or that the current letter do not match to the letter in the matrix.
	    {
            return false;
        }
        
        if(end == word.length()-1) // If we have reached the end of the given word, we found it in the matrix.
        {
            return true;
        }
          
        char temp = board[x][y]; // Make a copy of the current spot that we are in.
			board[x][y] = 'x'; 
			
			// Overwrite the current spot so that we will know that we have been here before (for the rest of the current iteration).
           
        boolean up = helper(board, x-1, y, word, end+1);       // Options of traversing the matrix.
        boolean down = helper(board, x+1, y, word, end+1);
        boolean left = helper(board, x, y-1, word, end+1);
        boolean right = helper(board, x, y+1, word, end+1);
        
        if(up || down || left || right) // If the options are valid, return true.
        {
            return true;
        }
        else
        {
             board[x][y] = temp; // Else overwrite the current spot with the copy of the original value for the next iteration.
             return false;
		}
			 
         
 }
}


Q.5  Given an array of non-negative integers nums, you are initially positioned at the first index of the array.
      Each element in the array represents your maximum jump length at that position.Determine if you are able to reach the last index.
      
      class Solution {
    public boolean canJump(int[] nums) {
        
        int midx=0;
        for(int i=0;i<nums.length;i++)
        {
            if(midx<i)                                //this is condition to check whether at particular index we will be able to reach or not
                return false;
            midx = Math.max(midx,i+nums[i]);          // at maximum index where we can reach
        }
        return true;
    }
}


Q.6.Given an array of non-negative integers nums, you are initially positioned at the first index of the array. Each element in the 
    array represents your maximum jump length at that position.Your goal is to reach the last index in the minimum number of jumps.
    You can assume that you can always reach the last index.
    
    
    class Solution {
    public int jump(int[] nums) {
        if(nums.length == 1) return 0;                   //if array contain only one element min no step require to reach last index is zero
        
        int n = nums.length-1;
        int count = 0;
        int maxpos = 0;
        int pos = 0;
        
        for(int i = 0;i<n;i++){
            maxpos = Math.max(maxpos,nums[i]+i);      //finding till which max index it can reach in next count
            if(pos == i){
                pos = maxpos;                          //Storing that index till which it can reach
                count++;                                 //min no step required to reach last index of array
            }
        }
     return count;   
    }
}


Q.7(123)You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

class Solution {
    public int maxProfit(int[] prices) {
        int buy1 = prices[0], buy2 = prices[0];
        int profit1 = 0, total_profit = 0;
        
        for (int price : prices) {
            buy1 = Math.min(buy1, price);
            profit1 = Math.max(profit1, price - buy1);
            buy2 = Math.min(buy2,  price-profit1);
            total_profit = Math.max(total_profit, price - buy2);
        }
        return total_profit;
    }
}

Q.8.(16).Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. 
Return the sum of the three integers. You may assume that each input would have exactly one solution.

Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).

/*class Solution {
    public int threeSumClosest(int[] nums, int target) {
        int near=0;int min =Integer.MAX_VALUE;int sum=0;
        for(int i=0;i<nums.length-2;i++)
        {
            for(int j=i+1;j<nums.length-1;j++)
            {
                for(int k=j+1;k<nums.length;k++)
                {
                    sum=nums[i]+nums[j]+nums[k];
                    if(min>Math.abs(sum-target))
                    {
                        min=Math.abs(sum-target);
                        near=sum;
                    }
                }
            }
        }
        return near;
    }
}*/

Method 2.

class Solution {
    public int threeSumClosest(int[] nums, int target) {
        int sum=0;int close=0;int min=Integer.MAX_VALUE;
        Arrays.sort(nums);
        for(int i=0;i<nums.length;i++)
        {
            int j=i+1;
            int k=nums.length-1;
            while(j<k)
            {
               sum=nums[i]+nums[j]+nums[k];
                if(target==sum)
                    return sum;
                else if(sum>target)
                    k--;
                else
                    j++;
                if(min>Math.abs(sum-target))
                {
                    min=Math.abs(sum-target);
                    close=sum;
                }
            }
        }
        return close;
    }}


Q.9.(54).Given an m x n matrix, return all elements of the matrix in spiral order.

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]

Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
       ArrayList<Integer> arr=new ArrayList<Integer>();
        int top=0;int bottom=matrix.length-1;int left=0;int right=matrix[0].length-1;       //We are declaring four pointer fror traversal in spiral order
        int dir=0;                                                                    // direction variable decides the direction which we are moving either horizontal or vertically
        
        while(top<=bottom && left<=right)                          
        {
        if(dir==0)
        {
            for(int i=left;i<=right;i++)                             //traversal from left to right
                arr.add(matrix[top][i]);
            top=top+1;
        }
        else if(dir==1)
        {
            for(int i=top;i<=bottom;i++)                           //traversal from top to bottom
                arr.add(matrix[i][right]);
            right=right-1;
        }
        else if(dir==2)
        {
            for(int i=right;i>=left;i--)                          //traversal from right to left
                arr.add(matrix[bottom][i]);
            bottom=bottom-1;
        }
        else
        {
            for(int i=bottom;i>=top;i--)
            arr.add(matrix[i][left]);                             //traversal from bottom to top
            left=left+1;
        }
        dir=(dir+1)%4;                                           //decides the direction
        }
        return arr;
    }
}

Q.10.(59).Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.

Input: n = 3
Output: [[1,2,3],[8,9,4],[7,6,5]]

Input: n = 1
Output: [[1]]

class Solution {
    public int[][] generateMatrix(int n) {
        int left=0;int right=n-1;int top=0;int bottom =n-1;
        int dir=0;
        int mat[][]=new int[n][n];int c=1;
        while(top<=bottom && left<=right)
        {
            if(dir==0)
            {
                for(int i=left;i<=right;i++)
                {
                    mat[top][i]=c;
                c++;
                }
                top=top+1;
                    
            }
           else if(dir==1)
            {
              for(int i=top;i<=bottom;i++ )
              {
                mat[i][right]=c;
                  c++;
              }
               right=right-1;
            }
            else if(dir==2)
            {
                for(int i=right;i>=left;i--)
                {
                    mat[bottom][i]=c;
                    c++;
                }
                bottom=bottom-1;
            }
            else if(dir==3)
            {
                for(int i=bottom;i>=top;i--)
                {
                    mat[i][left]=c;
                    c++;
                }
                left=left+1;
            }
            dir=(dir+1)%4;
        }
        return mat;
    }
}

Q.11.(78).Given an integer array nums of unique elements, return all possible subsets (the power set).
     The solution set must not contain duplicate subsets. Return the solution in any order.
     
     Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

Input: nums = [0]
Output: [[],[0]]

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> arr = new ArrayList<>();
        arr.add(new ArrayList<>());        
        
        for(int i = 0; i < nums.length; i++) {
            int length = arr.size();                                            // Calculating the size if list of list
            for(int j = 0; j < length; j++) {
                ArrayList<Integer> temp = new ArrayList<Integer>(arr.get(j));    //extracting the list from list of list
                temp.add(nums[i]);                                                //adding new elemnt to the list extracted ,and making it a new list
                arr.add(temp);                                                   // adding the new list to the list of list
            }
        }
        return arr;
    }
}


Q.12.(June1).You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

The area of an island is the number of cells with a value 1 in the island. Return the maximum area of an island in grid. If there is no island, return 0.

Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0]
,[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
Output: 6
Explanation: The answer is not 11, because the island must be connected 4-directionally.

Input: grid = [[0,0,0,0,0,0,0,0]]
Output: 0

class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        int row = grid.length;
        if (row == 0) {                                     // if no row exist return 0
            return 0;
        }
        int col = grid[0].length;
        if (col == 0) {                                     // if no column exist return 0
            return 0;
        }
        int result = 0;
        for (int i = 0; i < row; i++) {                     //Traversing through each element of grid and check whether it is equal to one or not
            for (int j = 0; j < col; j++) {
                if (grid[i][j] == 1) {
                    result = Math.max(result, helper(grid, i, j));
                }
            }
        }
        return result;
    }
    private int helper(int[][] grid, int x, int y) {
        if (x < 0 || x >= grid.length || y < 0 || y >= grid[0].length || grid[x][y] == 0) {     // checking the boundary condition
            return 0;
        }
        grid[x][y] = 0;
        return 1 + (helper(grid, x - 1, y) + helper(grid, x + 1, y) + helper(grid, x, y - 1) + helper(grid, x, y + 1));   // recursively calling method to check area of island
    }
}

